"""initial tables

Revision ID: b9fe5eda7b90
Revises: 
Create Date: 2025-06-23 11:03:39.958314

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b9fe5eda7b90'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ai_feedback')
    op.drop_table('suggestions')
    op.drop_table('models')
    op.drop_table('training_purchases')
    op.drop_table('trainings')
    op.drop_table('user_lines')
    op.drop_table('lines')
    op.drop_table('profiles')
    op.drop_table('payments')
    op.add_column('users', sa.Column('is_verified', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('verification_code', sa.String(), nullable=True))
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.drop_column('users', 'verification_code')
    op.drop_column('users', 'is_verified')
    op.create_table('payments',
    sa.Column('payment_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('purpose', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('payment_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('payments_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('payment_id', name=op.f('payments_pkey'))
    )
    op.create_table('profiles',
    sa.Column('profile_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('profile_image', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('profiles_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('profile_id', name=op.f('profiles_pkey'))
    )
    op.create_table('lines',
    sa.Column('line_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('line_id', name='lines_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_lines',
    sa.Column('user_line_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('line_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('purchased_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('expiration_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['line_id'], ['lines.line_id'], name=op.f('user_lines_line_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('user_lines_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_line_id', name=op.f('user_lines_pkey'))
    )
    op.create_table('trainings',
    sa.Column('training_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('line_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('video_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['line_id'], ['lines.line_id'], name='trainings_line_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('training_id', name='trainings_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('training_purchases',
    sa.Column('purchase_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('training_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('purchase_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('price_paid', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['training_id'], ['trainings.training_id'], name=op.f('training_purchases_training_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name=op.f('training_purchases_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('purchase_id', name=op.f('training_purchases_pkey'))
    )
    op.create_table('models',
    sa.Column('model_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('line_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['line_id'], ['lines.line_id'], name='models_line_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('model_id', name='models_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('suggestions',
    sa.Column('suggestion_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('uploaded_image_url', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('suggested_model_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('suggestion_date', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['suggested_model_id'], ['models.model_id'], name='suggestions_suggested_model_id_fkey', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.user_id'], name='suggestions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('suggestion_id', name='suggestions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ai_feedback',
    sa.Column('feedback_id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('suggestion_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name=op.f('ai_feedback_rating_check')),
    sa.ForeignKeyConstraint(['suggestion_id'], ['suggestions.suggestion_id'], name=op.f('ai_feedback_suggestion_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('feedback_id', name=op.f('ai_feedback_pkey'))
    )
    # ### end Alembic commands ###
